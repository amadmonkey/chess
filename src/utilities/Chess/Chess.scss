@import '../../Variables.scss';

.chess-container {
    position: relative;
    overflow: hidden;
    height: 100%;
    .graveyard-container {
        position: relative;
        top: 50%;
        left: 50%;
        transform: translateY(-50%) translateX(-50%);
        max-width: 700px;
        width: 90%;
    }
    .chess {
        position: absolute;
        top: 50%;
        right: 0;
        transform: translateY(-50%);
        max-width: 700px;
        width: 100%;
        border: 8px solid $board-dark;
        box-shadow: -19px 19px 19px darken($board-light, 20%);
        border-radius: 15px;
        &.turn-user {
            .tile {
                &.dark { .chess-piece:not(.opponent) { animation: glowz-for-dark 2s linear infinite; } }
                &.light { .chess-piece:not(.opponent) { animation: glowz-for-light 2s linear infinite; } }
            }
        }
        &.turn-opponent {
            .tile {
                &.dark { .chess-piece.opponent { animation: glowz-for-dark 2s linear infinite; } }
                &.light { .chess-piece.opponent { animation: glowz-for-light 2s linear infinite; } }
            }
        }
        &.overlay {
            .tiles {
                .tile {
                    &.valid-tile {
                        &:after {
                            opacity: 0;
                        }
                    }
                    &:after {
                        content: '';
                        pointer-events: none;
                        position: absolute;
                        height: 100%;
                        width: 100%;
                        top: 0;
                        opacity: 1;
                        background-color: #00000081;
                        z-index: 1;
                    }
                }
            }
        }
        .tiles {
           display: flex;
           flex-direction: row;
           flex-wrap: wrap; 
           .tile {
                position: relative;
                flex: 1 0 12%;
                @include transition(0.2s ease);
                &.dark {
                    background-color: $board-dark;
                    &:hover {
                        background-color: lighten($board-dark, 5%);
                    }
                }
                &.light {
                    background-color: $board-light;
                    &:hover {
                        background-color: lighten($board-light, 5%);
                    }
                }
                &:first-child {
                    border-top-left-radius: 10px;
                }
                &:last-child {
                    border-bottom-right-radius: 10px;
                }
                &:before {
                    content: "";
                    display: block;
                    padding-top: 100%;
                }
                .chess-piece {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    text-align: center;
                    top: 0;
                    padding: 10px;
                    box-sizing: border-box;
                    z-index: 3;
                    @include transition(0.5s ease-in-out);
                    &:not(.opponent) {
                        cursor: grab;
                    }
                    &.moving {
                        opacity: 0.3;
                    }
                    svg {
                        height: 100%;
                        width: 100%;
                    }
                }
           }
        }
        .hand {
            display: none;
            position: absolute;
            height: 100px;
            width: 100px;
            top: 0px;
            left: 0px;
            pointer-events: none;
            z-index: 4;
            svg {
                height: 100%;
                width: 100%;
                filter: drop-shadow( 10px 10px 5px rgba(0, 0, 0, .7));
            }
        }
    }
    .graveyard {
        svg {
            height: 40px;
        }
    }
}

@include glow-mixin(glowz-for-light, rgb(56, 56, 56));
@include glow-mixin(glowz-for-dark, rgb(206, 206, 206));